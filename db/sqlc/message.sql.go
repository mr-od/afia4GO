// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: message.sql

package db

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO chat_messages (
  chat_room_id,
  username,
  public_id,
  body
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, chat_room_id, username, public_id, body, created_at, updated_at, deleted_at
`

type CreateMessageParams struct {
	ChatRoomID int64  `json:"chat_room_id"`
	Username   string `json:"username"`
	PublicID   string `json:"public_id"`
	Body       string `json:"body"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (ChatMessage, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ChatRoomID,
		arg.Username,
		arg.PublicID,
		arg.Body,
	)
	var i ChatMessage
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.Username,
		&i.PublicID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM chat_messages
WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, chat_room_id, username, public_id, body, created_at, updated_at, deleted_at FROM chat_messages
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (ChatMessage, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i ChatMessage
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.Username,
		&i.PublicID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getMessageForUpdate = `-- name: GetMessageForUpdate :one
SELECT id, chat_room_id, username, public_id, body, created_at, updated_at, deleted_at FROM chat_messages
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetMessageForUpdate(ctx context.Context, id int64) (ChatMessage, error) {
	row := q.db.QueryRowContext(ctx, getMessageForUpdate, id)
	var i ChatMessage
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.Username,
		&i.PublicID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listMessages = `-- name: ListMessages :many
SELECT id, chat_room_id, username, public_id, body, created_at, updated_at, deleted_at FROM chat_messages
WHERE chat_room_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListMessagesParams struct {
	ChatRoomID int64 `json:"chat_room_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListMessages(ctx context.Context, arg ListMessagesParams) ([]ChatMessage, error) {
	rows, err := q.db.QueryContext(ctx, listMessages, arg.ChatRoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatMessage{}
	for rows.Next() {
		var i ChatMessage
		if err := rows.Scan(
			&i.ID,
			&i.ChatRoomID,
			&i.Username,
			&i.PublicID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE chat_messages
SET chat_room_id = $2
WHERE id = $1
RETURNING id, chat_room_id, username, public_id, body, created_at, updated_at, deleted_at
`

type UpdateMessageParams struct {
	ID         int64 `json:"id"`
	ChatRoomID int64 `json:"chat_room_id"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (ChatMessage, error) {
	row := q.db.QueryRowContext(ctx, updateMessage, arg.ID, arg.ChatRoomID)
	var i ChatMessage
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.Username,
		&i.PublicID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
