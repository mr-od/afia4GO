// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: product.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  owner,
  name,
  price,
  description,
  imgs_url,
  imgs
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, owner, price, description, imgs_url, imgs, created_at
`

type CreateProductParams struct {
	Owner       string   `json:"owner"`
	Name        string   `json:"name"`
	Price       int64    `json:"price"`
	Description string   `json:"description"`
	ImgsUrl     []string `json:"imgs_url"`
	Imgs        []string `json:"imgs"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Owner,
		arg.Name,
		arg.Price,
		arg.Description,
		pq.Array(arg.ImgsUrl),
		pq.Array(arg.Imgs),
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Owner,
		&i.Price,
		&i.Description,
		pq.Array(&i.ImgsUrl),
		pq.Array(&i.Imgs),
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, owner, price, description, imgs_url, imgs, created_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Owner,
		&i.Price,
		&i.Description,
		pq.Array(&i.ImgsUrl),
		pq.Array(&i.Imgs),
		&i.CreatedAt,
	)
	return i, err
}

const getProductForUpdate = `-- name: GetProductForUpdate :one
SELECT id, name, owner, price, description, imgs_url, imgs, created_at FROM products
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductForUpdate(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductForUpdate, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Owner,
		&i.Price,
		&i.Description,
		pq.Array(&i.ImgsUrl),
		pq.Array(&i.Imgs),
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, owner, price, description, imgs_url, imgs, created_at FROM products
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListProductsParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Owner,
			&i.Price,
			&i.Description,
			pq.Array(&i.ImgsUrl),
			pq.Array(&i.Imgs),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET price = $2
WHERE id = $1
RETURNING id, name, owner, price, description, imgs_url, imgs, created_at
`

type UpdateProductParams struct {
	ID    int64 `json:"id"`
	Price int64 `json:"price"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct, arg.ID, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Owner,
		&i.Price,
		&i.Description,
		pq.Array(&i.ImgsUrl),
		pq.Array(&i.Imgs),
		&i.CreatedAt,
	)
	return i, err
}
