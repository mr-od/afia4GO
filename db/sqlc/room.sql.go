// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: room.sql

package db

import (
	"context"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO chat_rooms (
  owner,
  name,
  public_id
) VALUES (
  $1, $2, $3
)
RETURNING id, name, public_id, owner, created_at, updated_at, deleted_at
`

type CreateRoomParams struct {
	Owner    string `json:"owner"`
	Name     string `json:"name"`
	PublicID string `json:"public_id"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (ChatRoom, error) {
	row := q.db.QueryRowContext(ctx, createRoom, arg.Owner, arg.Name, arg.PublicID)
	var i ChatRoom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PublicID,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM chat_rooms
WHERE id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, id)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT id, name, public_id, owner, created_at, updated_at, deleted_at FROM chat_rooms
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, name string) (ChatRoom, error) {
	row := q.db.QueryRowContext(ctx, getRoom, name)
	var i ChatRoom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PublicID,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getRoomForUpdate = `-- name: GetRoomForUpdate :one
SELECT id, name, public_id, owner, created_at, updated_at, deleted_at FROM chat_rooms
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetRoomForUpdate(ctx context.Context, id int64) (ChatRoom, error) {
	row := q.db.QueryRowContext(ctx, getRoomForUpdate, id)
	var i ChatRoom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PublicID,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listRooms = `-- name: ListRooms :many

SELECT id, name, public_id, owner, created_at, updated_at, deleted_at FROM chat_rooms
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRoomsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// -- name: ListRooms :many
// SELECT * FROM chat_rooms
// WHERE owner = $1
// ORDER BY id
// LIMIT $2
// OFFSET $3;
func (q *Queries) ListRooms(ctx context.Context, arg ListRoomsParams) ([]ChatRoom, error) {
	rows, err := q.db.QueryContext(ctx, listRooms, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatRoom{}
	for rows.Next() {
		var i ChatRoom
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PublicID,
			&i.Owner,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE chat_rooms
SET name = $2
WHERE id = $1
RETURNING id, name, public_id, owner, created_at, updated_at, deleted_at
`

type UpdateRoomParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (ChatRoom, error) {
	row := q.db.QueryRowContext(ctx, updateRoom, arg.ID, arg.Name)
	var i ChatRoom
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PublicID,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
