// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: subscription.sql

package db

import (
	"context"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO chat_subscriptions (
  chat_room_id,
  username
) VALUES (
  $1, $2
)
RETURNING id, chat_room_id, username, created_at, updated_at, deleted_at
`

type CreateSubscriptionParams struct {
	ChatRoomID int64  `json:"chat_room_id"`
	Username   string `json:"username"`
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (ChatSubscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription, arg.ChatRoomID, arg.Username)
	var i ChatSubscription
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM chat_subscriptions
WHERE id = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSubscription, id)
	return err
}

const getSubscription = `-- name: GetSubscription :one
SELECT id, chat_room_id, username, created_at, updated_at, deleted_at FROM chat_subscriptions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubscription(ctx context.Context, id int64) (ChatSubscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscription, id)
	var i ChatSubscription
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getSubscriptionForUpdate = `-- name: GetSubscriptionForUpdate :one
SELECT id, chat_room_id, username, created_at, updated_at, deleted_at FROM chat_subscriptions
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetSubscriptionForUpdate(ctx context.Context, id int64) (ChatSubscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionForUpdate, id)
	var i ChatSubscription
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listSubscriptions = `-- name: ListSubscriptions :many
SELECT id, chat_room_id, username, created_at, updated_at, deleted_at FROM chat_subscriptions
WHERE chat_room_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListSubscriptionsParams struct {
	ChatRoomID int64 `json:"chat_room_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListSubscriptions(ctx context.Context, arg ListSubscriptionsParams) ([]ChatSubscription, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptions, arg.ChatRoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatSubscription{}
	for rows.Next() {
		var i ChatSubscription
		if err := rows.Scan(
			&i.ID,
			&i.ChatRoomID,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscription = `-- name: UpdateSubscription :one
UPDATE chat_subscriptions
SET chat_room_id = $2
WHERE id = $1
RETURNING id, chat_room_id, username, created_at, updated_at, deleted_at
`

type UpdateSubscriptionParams struct {
	ID         int64 `json:"id"`
	ChatRoomID int64 `json:"chat_room_id"`
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) (ChatSubscription, error) {
	row := q.db.QueryRowContext(ctx, updateSubscription, arg.ID, arg.ChatRoomID)
	var i ChatSubscription
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
